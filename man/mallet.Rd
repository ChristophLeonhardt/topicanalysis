% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.mallet_method.R, R/store_method.R
\docType{methods}
\name{as.mallet}
\alias{as.mallet}
\alias{as.mallet,partitionBundle-method}
\alias{malletCmd}
\alias{store}
\alias{store,jobjRef-method}
\title{interface to mallet topicmodelling}
\usage{
as.mallet(.Object, ...)

\S4method{as.mallet}{partitionBundle}(.Object, pAttribute = "word",
  termsToDrop = tm::stopwords("de"), mc = TRUE, verbose = TRUE)

malletCmd(sourcefile, targetDir = "/Users/blaette/Lab/tmp/foo",
  topwords = 50, topics = 50, iterations = 2000, threads = 1)

store(object, ...)

\S4method{store}{jobjRef}(object, filename = NULL)
}
\arguments{
\item{.Object}{partition- or partitionBundle-object}

\item{...}{further parameters}

\item{pAttribute}{the pAttribute to use, typically "word" or "lemma"}

\item{termsToDrop}{stopwords}

\item{mc}{whether to use multicore}

\item{verbose}{logical, whether to be verbose}

\item{object}{the rJava-object}

\item{filename}{where to store the Java-object}

\item{termsToDrop}{typically, a list of stopwords}
}
\description{
Turn partitionBundle into a mallet object (instance list). The typical 
workflow will be as follows (see example): (1) Turn partitionBundle-object
into mallet instance list; (2a) store the resulting jobjRef-object locally
using store-method, create mallet command with malletCmd, and run mallet
from the command line; or (2b) run mallet topic modelling from within R.
}
\examples{
\dontrun{
use("polmineR.sampleCorpus")
bt2009 <- partition("PLPRBTTXT", text_year="2009")
bt2009bundle <- partitionBundle(bt2009, def=list(text_protocol_no=NULL), pAttribute=NULL)
instanceList <- as.mallet(bt2009bundle)
fname <- store(instanceList, filename=NULL) # output to a tempfile
topic.model <- MalletLDA(num.topics=20)
topic.model$loadDocuments(instanceList)
topic.model$setAlphaOptimization(20, 50)
topic.model$train(200)
}
}

